/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.6.3/userguide/tutorial_java_projects.html
 */

plugins {
    // Apply the java plugin to add support for Java
    id "java"

    // Apply the application plugin to add support for building a CLI application
    id "application"

    id "com.github.johnrengelman.shadow" version "5.2.0"

    id "nu.studer.jooq" version "3.0.3"

    id 'pmd'

    // id 'org.sonatype.gradle.plugins.scan' version '1.0.0'
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    maven {
         url "https://mvnrepository.com/artifact/org.xerial/sqlite-jdbc"
         url "https://plugins.gradle.org/m2/"
         url "http://maven.cubrid.org/"
    }

    mavenCentral()
    mavenLocal()
}

version = "4.0.0"
ext {
    vertxVersion = "4.0.0"
    junitJupiterEngineVersion = "5.4.0"
    jooqVersion = "3.13.2"
}
sourceCompatibility = "1.8"

jooq {
  version = "3.14.4"
  edition = "OSS"
}

pmd {
    ruleSetFiles = files("dodexstart.xml")
    ruleSets = []
    ignoreFailures = true
    toolVersion = "6.24.0"
}
// per Stack Overflow - ony way to test the Vertx SNAPSHOTS
// def urlFile = { url, name ->
//     File file = new File("$buildDir/download/${name}.jar")
//     file.parentFile.mkdirs()
//     if (!file.exists()) {
//         new URL(url).withInputStream { downloadStream ->
//             file.withOutputStream { fileOut ->
//                 fileOut << downloadStream
//             }
//         }
//     }
//     files(file.absolutePath)
// }

dependencies {
    implementation group:"io.vertx", name:"vertx-core", version:"$version"
    implementation "io.vertx:vertx-web:$version"
    implementation "io.vertx:vertx-web-api-contract:$version"
    implementation group: "io.agroal", name: "agroal-pool", version: "1.9"
    implementation "io.vertx:vertx-pg-client:$vertxVersion"
    implementation "io.vertx:vertx-mysql-client:$vertxVersion"
    implementation "io.vertx:vertx-jdbc-client:$vertxVersion"
    implementation "io.vertx:vertx-db2-client:$vertxVersion"
    // implementation urlFile("https://oss.sonatype.org/content/repositories/snapshots/io/vertx/vertx-jdbc-client/4.0.1-SNAPSHOT/vertx-jdbc-client-4.0.1-20201216.040500-8.jar?raw=true", "vertx-jdbc-SNAPSHOT")
    implementation "io.vertx:vertx-rx-java2:$version"
    implementation "org.slf4j:slf4j-jcl:1.7.28"
    implementation group: "org.xerial", name: "sqlite-jdbc", version: "3.31.1"
    implementation group: "cubrid", name: "cubrid-jdbc", version: "10.2.1.8849"
    implementation "org.jooq:jooq"
    implementation "io.vertx:vertx-tcp-eventbus-bridge:$version"

    // This dependency is used by the application.u
    implementation "com.google.guava:guava:28.0-jre"

    testImplementation "io.vertx:vertx-junit5:$vertxVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitJupiterEngineVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitJupiterEngineVersion"
    testImplementation "junit:junit:4.12"
    // testImplementation "io.vertx:vertx-unit:$vertxVersion"
    // testImplementation group: "io.vertx", name: "vertx-junit5-rx-java", version: "$vertxVersion"

}

application {
    // Define the main class for the application
    mainClassName = "io.vertx.core.Launcher"
}


def mainVerticleName = "dmo.fs.vertx.Server"
def doOnChange = ".${File.separator}gradlew classes"
def watchForChange = "src/main/java/**/*.java"
def debug = ""
def OS = System.getProperty("os.name").toLowerCase();

apply plugin: "nu.studer.jooq"
// apply plugin: "org.sonatype.gradle.plugins.scan"

run {
     if (System.getProperty("DEBUG", "false") == "true") {
        debug = "--java-opts=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005"
    }

    environment "VERTXWEB_ENVIRONMENT", "dev"
    args = ['run', mainVerticleName,  debug, "--redeploy=$watchForChange", "--launcher-class=$mainClassName", "--on-redeploy=$doOnChange", "--conf=src/main/resources/application-conf.json"]
    systemProperty("java.util.logging.config.file", "src/main/java/vertx-default-jul-logging.properties")
}
/*
  The stop, start, list Sever commands can be used after running "gradlew shadowJar".
 */
task stopServer(type:Exec) {
  def id = System.getProperty("id") ? System.getProperty("id") : "";
  workingDir "./build/libs"

  //on windows:
  if(OS.indexOf("win") >= 0) {
    commandLine "cmd", "/c", "java" args "-jar", "dodex-vertx-${version}.jar", "stop" id
  } else {
  //on linux
    commandLine "java" args "-jar", "dodex-vertx-${version}.jar", "stop", id
  }
}

task startServer(type:Exec) {
  workingDir "./build/libs"

  //on windows:
  if(OS.indexOf("win") >= 0) {
    commandLine "cmd", "/c", "java"  args "-jar", "dodex-vertx-${version}.jar", "start" 
  } else {
  //on linux
    commandLine "java"  args "-jar", "dodex-vertx-${version}.jar", "start"
  } 
}

task listServer(type:Exec) {
  workingDir "./build/libs"

  //on windows:
  if(OS.indexOf("win") >= 0) {
    commandLine "cmd", "/c", "java" args "-jar", "dodex-vertex.${version}.jar", "list"
  } else {
  //on linux
    commandLine "java"  args "-jar", "dodex-vertx-${version}.jar", "list"
  }
}

shadowJar {
  classifier = ""

  mergeServiceFiles {
    include "META-INF/services/io.vertx.core.spi.VerticleFactory"
  }

  manifest{
    attributes 'Main-Verticle': mainVerticleName
    // attributes 'Main-Command': 'run'
  }
}

test {
    // Use junit platform for unit tests
    environment "VERTXWEB_ENVIRONMENT", "test"
    useJUnitPlatform()
    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
    }
}
