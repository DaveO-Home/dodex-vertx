/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/current/userguide/building_java_projects.html
 */
// buildscript {
//   dependencies {
//     classpath "com.google.protobuf:protobuf-gradle-plugin:0.8.18"
//   }
// }
plugins {
    // Apply the java plugin to add support for Java
    id "java"

    // Apply the application plugin to add support for building a CLI application
    id "application"

    id "com.github.johnrengelman.shadow" version "7.0.0"

    id "nu.studer.jooq" version "7.1.1" // "3.0.3"

    id 'pmd'
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    maven {
        url "https://plugins.gradle.org/m2/"
    }
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
    mavenCentral()
    mavenLocal()
    maven {
        url "https://maven.cubrid.org/"
    }
}

version = "2.5.0"

ext {
    vertxVersion = "4.3.4"
    junitJupiterEngineVersion = "5.4.0"
    jooqVersion = "3.13.2"
    protoVersion = "3.21.1"
    grpcVersion = "1.49.2"
}
sourceCompatibility = "11"

pmd {
    ruleSetFiles = files("dodexstart.xml")
    ruleSets = []
    ignoreFailures = true
    toolVersion = "6.36.0"
}

dependencies {
    implementation group:"io.vertx", name:"vertx-core", version:"$vertxVersion"
    implementation "io.vertx:vertx-web:$vertxVersion"
    implementation "io.vertx:vertx-web-api-contract:$vertxVersion"
    implementation group: "io.agroal", name: "agroal-pool", version: "1.13"
    implementation "io.vertx:vertx-pg-client:$vertxVersion"
    implementation "io.vertx:vertx-mysql-client:$vertxVersion"
    implementation "io.vertx:vertx-jdbc-client:$vertxVersion"
    implementation "io.vertx:vertx-db2-client:$vertxVersion"
    implementation "io.vertx:vertx-rx-java3:$vertxVersion"
    implementation group: "org.slf4j", name: "slf4j-reload4j", version: "2.0.0"

    implementation group: "org.xerial", name: "sqlite-jdbc", version: "3.31.1"
    implementation group: "cubrid", name: "cubrid-jdbc", version: "11.0.3.0293"
    implementation "com.google.firebase:firebase-admin:7.2.0"
    implementation group: "org.neo4j.driver", name: "neo4j-java-driver", version: "4.4.9"
    implementation "io.smallrye.reactive:smallrye-mutiny-vertx-core:2.24.1"
    implementation group: 'javax.ws.rs', name: 'jsr311-api', version: '1.1.1'

    implementation "org.jooq:jooq"
    implementation "io.vertx:vertx-tcp-eventbus-bridge:$vertxVersion"
    implementation "io.vertx:vertx-kafka-client:$vertxVersion"

    implementation "com.google.guava:guava:28.0-jre"
    implementation project(":handicap")
    implementation "dmo.fs.utils:generate"

    testImplementation "io.vertx:vertx-junit5:$vertxVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitJupiterEngineVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitJupiterEngineVersion"
    testImplementation "junit:junit:4.12"
}

application {
    getMainClass().set("io.vertx.core.Launcher")
}

def mainVerticleName = "dmo.fs.vertx.Server"
def mainClassName = "io.vertx.core.Launcher"
def doOnChange = ".${File.separator}gradlew classes"
def watchForChange = "src/main/java/**/*.java, handicap/src/main/**/*"
def debug = ""
def OS = System.getProperty("os.name").toLowerCase();
def usr = System.getProperty("user.home")

apply plugin: "nu.studer.jooq"

// tasks.withType(JavaCompile) {
//     options.compilerArgs << "-Xlint:deprecation"
// }

run {
     if (System.getProperty("DEBUG", "false") == "true") {
        debug = "--java-opts=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005"
    }

    environment "VERTXWEB_ENVIRONMENT", "dev"
    if (System.getenv("GOOGLE_APPLICATION_CREDENTIALS") == null) {
      environment "GOOGLE_APPLICATION_CREDENTIALS", "$usr/auth/service-account-key.json"
    }

    args = ['run', mainVerticleName,  debug, "--redeploy=$watchForChange", "--launcher-class=$mainClassName",
    "--on-redeploy=$doOnChange", "--conf=src/main/resources/application-conf.json",
    "--java-opts=-Dvertx.disableFileCaching=true"]
    systemProperty("java.util.logging.config.file", "src/main/java/vertx-default-jul-logging.properties")
}

/*
  The stop, start, list Server commands can be used after running "gradlew shadowJar".
 */
task stopServer(type:Exec) {
  def id = System.getProperty("id") ? System.getProperty("id") : "";
  workingDir "./build/libs"

  //on windows:
  if(OS.indexOf("win") >= 0) {
    commandLine "cmd", "/c", "java" args "-jar", "dodex-vertx-${version}.jar", "stop" id
  } else {
  //on linux
    commandLine "java" args "-jar", "dodex-vertx-${version}.jar", "stop", id
  }
}

task startServer(type:Exec) {
  workingDir "./build/libs"

  //on windows:
  if(OS.indexOf("win") >= 0) {
    commandLine "cmd", "/c", "java"  args "-jar", "dodex-vertx-${version}.jar", "start" 
  } else {
  //on linux
    commandLine "java"  args "-jar", "dodex-vertx-${version}.jar", "start"
  } 
}

task listServer(type:Exec) {
  workingDir "./build/libs"

  //on windows:
  if(OS.indexOf("win") >= 0) {
    commandLine "cmd", "/c", "java" args "-jar", "dodex-vertex.${version}.jar", "list"
  } else {
  //on linux
    commandLine "java"  args "-jar", "dodex-vertx-${version}.jar", "list"
  }
}

shadowJar {
  classifier = ""

  mergeServiceFiles {
    include "META-INF/services/io.vertx.core.spi.VerticleFactory"
  }

  manifest{
    attributes 'Main-Verticle': mainVerticleName
  }
}

test {
    // Use junit platform for unit tests
    environment "VERTXWEB_ENVIRONMENT", "test"
    useJUnitPlatform()
    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
    }
}
