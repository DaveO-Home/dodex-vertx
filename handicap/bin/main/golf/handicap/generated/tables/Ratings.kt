/*
 * This file is generated by jOOQ.
 */
package golf.handicap.generated.tables


import golf.handicap.generated.DefaultSchema
import golf.handicap.generated.keys.RATINGS__FK_RATINGS_PK_COURSE
import golf.handicap.generated.keys.RATINGS__PK_RATINGS
import golf.handicap.generated.tables.records.RatingsRecord

import java.util.function.Function

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row6
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Ratings(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, RatingsRecord>?,
    aliased: Table<RatingsRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<RatingsRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>RATINGS</code>
         */
        val RATINGS: Ratings = Ratings()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<RatingsRecord> = RatingsRecord::class.java

    /**
     * The column <code>RATINGS.COURSE_SEQ</code>.
     */
    val COURSE_SEQ: TableField<RatingsRecord, Int?> = createField(DSL.name("COURSE_SEQ"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>RATINGS.TEE</code>.
     */
    val TEE: TableField<RatingsRecord, Int?> = createField(DSL.name("TEE"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>RATINGS.TEE_COLOR</code>.
     */
    val TEE_COLOR: TableField<RatingsRecord, String?> = createField(DSL.name("TEE_COLOR"), SQLDataType.VARCHAR(16), this, "")

    /**
     * The column <code>RATINGS.TEE_RATING</code>.
     */
    val TEE_RATING: TableField<RatingsRecord, Float?> = createField(DSL.name("TEE_RATING"), SQLDataType.REAL.nullable(false), this, "")

    /**
     * The column <code>RATINGS.TEE_SLOPE</code>.
     */
    val TEE_SLOPE: TableField<RatingsRecord, Int?> = createField(DSL.name("TEE_SLOPE"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>RATINGS.TEE_PAR</code>.
     */
    val TEE_PAR: TableField<RatingsRecord, Int?> = createField(DSL.name("TEE_PAR"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("'72'", SQLDataType.INTEGER)), this, "")

    private constructor(alias: Name, aliased: Table<RatingsRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<RatingsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>RATINGS</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>RATINGS</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>RATINGS</code> table reference
     */
    constructor(): this(DSL.name("RATINGS"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, RatingsRecord>): this(Internal.createPathAlias(child, key), child, key, RATINGS, null)
    override fun getSchema(): Schema? = if (aliased()) null else DefaultSchema.DEFAULT_SCHEMA
    override fun getPrimaryKey(): UniqueKey<RatingsRecord> = RATINGS__PK_RATINGS
    override fun getReferences(): List<ForeignKey<RatingsRecord, *>> = listOf(RATINGS__FK_RATINGS_PK_COURSE)

    private lateinit var _course: Course

    /**
     * Get the implicit join path to the <code>COURSE</code> table.
     */
    fun course(): Course {
        if (!this::_course.isInitialized)
            _course = Course(this, RATINGS__FK_RATINGS_PK_COURSE)

        return _course;
    }

    val course: Course
        get(): Course = course()
    override fun `as`(alias: String): Ratings = Ratings(DSL.name(alias), this)
    override fun `as`(alias: Name): Ratings = Ratings(alias, this)
    override fun `as`(alias: Table<*>): Ratings = Ratings(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Ratings = Ratings(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Ratings = Ratings(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Ratings = Ratings(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row6<Int?, Int?, String?, Float?, Int?, Int?> = super.fieldsRow() as Row6<Int?, Int?, String?, Float?, Int?, Int?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Int?, Int?, String?, Float?, Int?, Int?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Int?, Int?, String?, Float?, Int?, Int?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
