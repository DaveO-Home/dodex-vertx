import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

// import nu.studer.gradle.jooq.JooqEdition

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.5/userguide/building_java_projects.html
 */
buildscript {
  ext.kotlin_version = "1.9.0"

  dependencies {
    classpath "com.google.protobuf:protobuf-gradle-plugin:0.9.3"
  }
}

plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    id "org.jetbrains.kotlin.jvm" version "1.9.0"

    id "application"

    id "com.github.johnrengelman.shadow" version "8.1.1"


    id "nu.studer.jooq" version "7.1.1"

    id "java"
}

apply plugin: "kotlin"
apply plugin: "com.google.protobuf"

repositories {
    maven {
        url "https://plugins.gradle.org/m2/"
    }

    mavenCentral()
    mavenLocal()
}

version = "0.0.1"
ext {
  vertxVersion = "4.4.5"
  protoVersion = "3.22.5"
  grpcVersion = "1.56.0"
}
def mainVerticleName = "golf.handicap.vertx.MainVerticle"
def launcherClassName = "io.vertx.core.Launcher"
def junitJupiterVersion = "5.7.0"
def watchForChange = "src/main/**/*"
def doOnChange = "${projectDir}/gradlew classes"
def OS = System.getProperty("os.name").toLowerCase();
def jooqClasspath
def javaTargetVersion = 17
def useHandicap = System.getenv("USE_HANDICAP");

application {
  getMainClass().set(launcherClassName)
}

version = "3.1.0"

/*
jooq {
  version = "3.18.4"
  edition = JooqEdition.OSS
}
*/
tasks.register('copyDatabaseConfig', Copy) {
    // from("src/main/resources/database_config.json") 
    // into new File("build", "resources/main")
    dependsOn gradle.includedBuild("generate").task(":build")
}
/*
  Using a java class to generate jooq objects - allows for multiple db's - see ./generate directory
  Composite build - implementation("dmo.fs.utils:generate:0.0.1") - this avoids the circular dependancy error
*/
tasks.register('jooqGenerate', JavaExec) {
    group "Execution"
    doFirst {
        classpath = sourceSets.main.runtimeClasspath
    }
    // Needs work on setting up Jooq Code Generator for "mariadb"
    def defaultValue = environment.get("DEFAULT_DB")
    if("mariadb" == defaultValue) {
        environment.remove("DEFAULT_DB")
    }
    environment "VERTXWEB_ENVIRONMENT", "dev"
    mainClass = "dmo.fs.utils.JooqGenerate"
    args = ["dev"]
    dependsOn copyDatabaseConfig
}

run {
  doFirst {
     if (System.getProperty("DEBUG", "false") == "true") {
        debug = "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005"
    }

    environment "VERTXWEB_ENVIRONMENT", "dev"

    args = ['run', mainVerticleName, "--redeploy=$watchForChange", "--launcher-class=$launcherClassName", 
      "--on-redeploy=$doOnChange", "--conf=src/main/resources/application-conf.json",
      "--java-opts=-Dvertx.disableFileCaching=true", "-PcompileOnly", debug]
  }
  if (project.hasProperty("compileOnly")) {
    dependsOn jooqGenerate
  }
}

kotlin {
  // change if out of memory
  jvmToolchain(javaTargetVersion)
  kotlinDaemonJvmArgs = ["-Xmx512m", "-Xms256m", "-XX:+UseParallelGC"]
}

compileKotlin {
   if (project.hasProperty("compileOnly")) {
    dependsOn jooqGenerate
   }
}

//compileJava {
//    dependsOn processResources
//}
//processResources {
//    dependsOn compileJava
//}

distZip {
    dependsOn("shadowJar")
}

sourceCompatibility = "17"
// The standard protobuf block, same as normal gRPC Java projects
protobuf {
  protoc { artifact = "com.google.protobuf:protoc:${protoVersion}" }
    plugins {
      grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
      vertx {
        artifact = "io.vertx:vertx-grpc-protoc-plugin"
      }
    }
    generateProtoTasks {
      all()*.plugins { grpc {} }
    }
}

dependencies {
    implementation(platform("io.vertx:vertx-stack-depchain:$vertxVersion"))
    shadow gradleApi()
    implementation("io.vertx:vertx-core:$vertxVersion")
    implementation("io.vertx:vertx-rx-java3:$vertxVersion")
    implementation("io.vertx:vertx-config:$vertxVersion")
    implementation("io.vertx:vertx-web:$vertxVersion")
    implementation("io.vertx:vertx-lang-kotlin")
    implementation("io.vertx:vertx-lang-kotlin-coroutines")
    implementation "io.vertx:vertx-web-api-contract:$vertxVersion"
    implementation("io.vertx:vertx-jdbc-client:$vertxVersion")
    implementation("io.vertx:vertx-web-templ-thymeleaf:$vertxVersion")
    implementation("io.vertx:vertx-grpc")
    implementation("io.vertx:vertx-grpc-client:$vertxVersion")
    implementation("io.agroal:agroal-pool:2.1")
    implementation("org.xerial:sqlite-jdbc:3.40.1.0")
    implementation("io.vertx:vertx-mysql-client:$vertxVersion")
    implementation("io.vertx:vertx-pg-client:$vertxVersion")
    implementation('org.mariadb.jdbc:mariadb-java-client:3.1.2')
    implementation('org.jooq:jooq:3.23.3')
    implementation('org.jooq:jooq-codegen-maven:3.23.3')
    implementation('org.jooq:jooq-meta:3.23.3')
    implementation("javax.annotation:javax.annotation-api:1.3.2")
    implementation("com.google.guava:guava:31.1-jre")
    runtimeOnly("org.postgresql:postgresql:42.6.0")

    implementation 'io.github.microutils:kotlin-logging-jvm:2.0.11'

    testImplementation("io.vertx:vertx-junit5:$vertxVersion")
    testImplementation("org.junit.jupiter:junit-jupiter:$junitJupiterVersion")
    testImplementation("junit:junit:4.13.2")

    implementation("dmo.fs.utils:generate:0.0.1")
}

apply plugin: "nu.studer.jooq"

shadowJar {
  archiveClassifier = "fat"

  mergeServiceFiles {
    include "META-INF/services/io.vertx.core.spi.VerticleFactory"
  }

  manifest{
    attributes 'Main-Verticle': mainVerticleName
  }
}

test {
    // Use junit platform for unit tests
    environment "VERTXWEB_ENVIRONMENT", "test"
    useJUnitPlatform()
    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
    }
}
