/*
 * This file is generated by jOOQ.
 */
package golf.handicap.generated.tables


import golf.handicap.generated.DefaultSchema
import golf.handicap.generated.keys.GOLFER_NAMES_UNIQUE
import golf.handicap.generated.keys.GOLFER_PKEY
import golf.handicap.generated.tables.records.GolferRecord

import java.util.function.Function

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row9
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Golfer(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, GolferRecord>?,
    aliased: Table<GolferRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<GolferRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>golfer</code>
         */
        val GOLFER: Golfer = Golfer()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<GolferRecord> = GolferRecord::class.java

    /**
     * The column <code>golfer.pin</code>.
     */
    val PIN: TableField<GolferRecord, String?> = createField(DSL.name("pin"), SQLDataType.VARCHAR(8).nullable(false), this, "")

    /**
     * The column <code>golfer.first_name</code>.
     */
    val FIRST_NAME: TableField<GolferRecord, String?> = createField(DSL.name("first_name"), SQLDataType.VARCHAR(32).nullable(false), this, "")

    /**
     * The column <code>golfer.last_name</code>.
     */
    val LAST_NAME: TableField<GolferRecord, String?> = createField(DSL.name("last_name"), SQLDataType.VARCHAR(32).nullable(false), this, "")

    /**
     * The column <code>golfer.handicap</code>.
     */
    val HANDICAP: TableField<GolferRecord, Float?> = createField(DSL.name("handicap"), SQLDataType.REAL.defaultValue(DSL.field("0.0", SQLDataType.REAL)), this, "")

    /**
     * The column <code>golfer.country</code>.
     */
    val COUNTRY: TableField<GolferRecord, String?> = createField(DSL.name("country"), SQLDataType.CHAR(2).nullable(false).defaultValue(DSL.field("'US'::bpchar", SQLDataType.CHAR)), this, "")

    /**
     * The column <code>golfer.state</code>.
     */
    val STATE: TableField<GolferRecord, String?> = createField(DSL.name("state"), SQLDataType.CHAR(2).nullable(false).defaultValue(DSL.field("'NV'::bpchar", SQLDataType.CHAR)), this, "")

    /**
     * The column <code>golfer.overlap_years</code>.
     */
    val OVERLAP_YEARS: TableField<GolferRecord, Boolean?> = createField(DSL.name("overlap_years"), SQLDataType.BOOLEAN.defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "")

    /**
     * The column <code>golfer.public</code>.
     */
    val PUBLIC: TableField<GolferRecord, Boolean?> = createField(DSL.name("public"), SQLDataType.BOOLEAN.defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "")

    /**
     * The column <code>golfer.last_login</code>.
     */
    val LAST_LOGIN: TableField<GolferRecord, Long?> = createField(DSL.name("last_login"), SQLDataType.BIGINT, this, "")

    private constructor(alias: Name, aliased: Table<GolferRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<GolferRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>golfer</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>golfer</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>golfer</code> table reference
     */
    constructor(): this(DSL.name("golfer"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, GolferRecord>): this(Internal.createPathAlias(child, key), child, key, GOLFER, null)
    override fun getSchema(): Schema? = if (aliased()) null else DefaultSchema.DEFAULT_SCHEMA
    override fun getPrimaryKey(): UniqueKey<GolferRecord> = GOLFER_PKEY
    override fun getUniqueKeys(): List<UniqueKey<GolferRecord>> = listOf(GOLFER_NAMES_UNIQUE)
    override fun `as`(alias: String): Golfer = Golfer(DSL.name(alias), this)
    override fun `as`(alias: Name): Golfer = Golfer(alias, this)
    override fun `as`(alias: Table<*>): Golfer = Golfer(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Golfer = Golfer(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Golfer = Golfer(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Golfer = Golfer(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row9<String?, String?, String?, Float?, String?, String?, Boolean?, Boolean?, Long?> = super.fieldsRow() as Row9<String?, String?, String?, Float?, String?, String?, Boolean?, Boolean?, Long?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (String?, String?, String?, Float?, String?, String?, Boolean?, Boolean?, Long?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (String?, String?, String?, Float?, String?, String?, Boolean?, Boolean?, Long?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
