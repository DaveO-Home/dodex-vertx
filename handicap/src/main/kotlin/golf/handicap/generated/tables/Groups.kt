/*
 * This file is generated by jOOQ.
 */
package golf.handicap.generated.tables


import golf.handicap.generated.DefaultSchema
import golf.handicap.generated.keys.GROUPS_PKEY
import golf.handicap.generated.keys.NAME_UKEY
import golf.handicap.generated.tables.records.GroupsRecord

import java.time.OffsetDateTime

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row5
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Groups(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, GroupsRecord>?,
    aliased: Table<GroupsRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<GroupsRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>groups</code>
         */
        val GROUPS: Groups = Groups()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<GroupsRecord> = GroupsRecord::class.java

    /**
     * The column <code>groups.id</code>.
     */
    val ID: TableField<GroupsRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>groups.name</code>.
     */
    val NAME: TableField<GroupsRecord, String?> = createField(DSL.name("name"), SQLDataType.VARCHAR(24), this, "")

    /**
     * The column <code>groups.owner</code>.
     */
    val OWNER: TableField<GroupsRecord, Int?> = createField(DSL.name("owner"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>groups.created</code>.
     */
    val CREATED: TableField<GroupsRecord, OffsetDateTime?> = createField(DSL.name("created"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "")

    /**
     * The column <code>groups.updated</code>.
     */
    val UPDATED: TableField<GroupsRecord, OffsetDateTime?> = createField(DSL.name("updated"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")

    private constructor(alias: Name, aliased: Table<GroupsRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<GroupsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>groups</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>groups</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>groups</code> table reference
     */
    constructor(): this(DSL.name("groups"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, GroupsRecord>): this(Internal.createPathAlias(child, key), child, key, GROUPS, null)
    override fun getSchema(): Schema? = if (aliased()) null else DefaultSchema.DEFAULT_SCHEMA
    override fun getIdentity(): Identity<GroupsRecord, Int?> = super.getIdentity() as Identity<GroupsRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<GroupsRecord> = GROUPS_PKEY
    override fun getUniqueKeys(): List<UniqueKey<GroupsRecord>> = listOf(NAME_UKEY)
    override fun `as`(alias: String): Groups = Groups(DSL.name(alias), this)
    override fun `as`(alias: Name): Groups = Groups(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Groups = Groups(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Groups = Groups(name, null)

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row5<Int?, String?, Int?, OffsetDateTime?, OffsetDateTime?> = super.fieldsRow() as Row5<Int?, String?, Int?, OffsetDateTime?, OffsetDateTime?>
}
