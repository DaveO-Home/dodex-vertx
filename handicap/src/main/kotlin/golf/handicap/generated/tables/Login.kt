/*
 * This file is generated by jOOQ.
 */
package golf.handicap.generated.tables


import golf.handicap.generated.DefaultSchema
import golf.handicap.generated.keys.LOGIN_NAME_UNIQUE
import golf.handicap.generated.keys.LOGIN_PASSWORD_UNIQUE
import golf.handicap.generated.keys.LOGIN_PKEY
import golf.handicap.generated.tables.records.LoginRecord

import java.time.OffsetDateTime
import java.util.function.Function

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row4
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Login(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, LoginRecord>?,
    aliased: Table<LoginRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<LoginRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>login</code>
         */
        val LOGIN: Login = Login()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<LoginRecord> = LoginRecord::class.java

    /**
     * The column <code>login.id</code>.
     */
    val ID: TableField<LoginRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>login.name</code>.
     */
    val NAME: TableField<LoginRecord, String?> = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>login.password</code>.
     */
    val PASSWORD: TableField<LoginRecord, String?> = createField(DSL.name("password"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>login.last_login</code>.
     */
    val LAST_LOGIN: TableField<LoginRecord, OffsetDateTime?> = createField(DSL.name("last_login"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")

    private constructor(alias: Name, aliased: Table<LoginRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<LoginRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>login</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>login</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>login</code> table reference
     */
    constructor(): this(DSL.name("login"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, LoginRecord>): this(Internal.createPathAlias(child, key), child, key, LOGIN, null)
    override fun getSchema(): Schema? = if (aliased()) null else DefaultSchema.DEFAULT_SCHEMA
    override fun getIdentity(): Identity<LoginRecord, Int?> = super.getIdentity() as Identity<LoginRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<LoginRecord> = LOGIN_PKEY
    override fun getUniqueKeys(): List<UniqueKey<LoginRecord>> = listOf(LOGIN_NAME_UNIQUE, LOGIN_PASSWORD_UNIQUE)
    override fun `as`(alias: String): Login = Login(DSL.name(alias), this)
    override fun `as`(alias: Name): Login = Login(alias, this)
    override fun `as`(alias: Table<*>): Login = Login(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Login = Login(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Login = Login(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Login = Login(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row4<Int?, String?, String?, OffsetDateTime?> = super.fieldsRow() as Row4<Int?, String?, String?, OffsetDateTime?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Int?, String?, String?, OffsetDateTime?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Int?, String?, String?, OffsetDateTime?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
