/*
 * This file is generated by jOOQ.
 */
package golf.handicap.generated.tables


import golf.handicap.generated.DefaultSchema
import golf.handicap.generated.keys.MEMBER__MEMBER_GROUP_ID_FOREIGN
import golf.handicap.generated.tables.records.MemberRecord

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row2
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Member(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, MemberRecord>?,
    aliased: Table<MemberRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<MemberRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>member</code>
         */
        val MEMBER: Member = Member()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<MemberRecord> = MemberRecord::class.java

    /**
     * The column <code>member.group_id</code>.
     */
    val GROUP_ID: TableField<MemberRecord, Int?> = createField(DSL.name("group_id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>member.user_id</code>.
     */
    val USER_ID: TableField<MemberRecord, Int?> = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "")

    private constructor(alias: Name, aliased: Table<MemberRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<MemberRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>member</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>member</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>member</code> table reference
     */
    constructor(): this(DSL.name("member"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, MemberRecord>): this(Internal.createPathAlias(child, key), child, key, MEMBER, null)
    override fun getSchema(): Schema? = if (aliased()) null else DefaultSchema.DEFAULT_SCHEMA
    override fun getReferences(): List<ForeignKey<MemberRecord, *>> = listOf(MEMBER__MEMBER_GROUP_ID_FOREIGN)

    private lateinit var _groups: Groups

    /**
     * Get the implicit join path to the <code>public.groups</code> table.
     */
    fun groups(): Groups {
        if (!this::_groups.isInitialized)
            _groups = Groups(this, MEMBER__MEMBER_GROUP_ID_FOREIGN)

        return _groups;
    }
    override fun `as`(alias: String): Member = Member(DSL.name(alias), this)
    override fun `as`(alias: Name): Member = Member(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Member = Member(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Member = Member(name, null)

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row2<Int?, Int?> = super.fieldsRow() as Row2<Int?, Int?>
}
