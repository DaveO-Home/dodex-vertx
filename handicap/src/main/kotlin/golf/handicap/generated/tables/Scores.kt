/*
 * This file is generated by jOOQ.
 */
package golf.handicap.generated.tables


import golf.handicap.generated.DefaultSchema
import golf.handicap.generated.keys.SCORES__FK_COURSE_SCORES
import golf.handicap.generated.keys.SCORES__FK_GOLFER_SCORES
import golf.handicap.generated.tables.records.ScoresRecord

import java.util.function.Function

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row9
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Scores(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, ScoresRecord>?,
    aliased: Table<ScoresRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<ScoresRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>scores</code>
         */
        val SCORES: Scores = Scores()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ScoresRecord> = ScoresRecord::class.java

    /**
     * The column <code>scores.pin</code>.
     */
    val PIN: TableField<ScoresRecord, String?> = createField(DSL.name("pin"), SQLDataType.VARCHAR(8).nullable(false), this, "")

    /**
     * The column <code>scores.gross_score</code>.
     */
    val GROSS_SCORE: TableField<ScoresRecord, Int?> = createField(DSL.name("gross_score"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>scores.net_score</code>.
     */
    val NET_SCORE: TableField<ScoresRecord, Float?> = createField(DSL.name("net_score"), SQLDataType.REAL, this, "")

    /**
     * The column <code>scores.adjusted_score</code>.
     */
    val ADJUSTED_SCORE: TableField<ScoresRecord, Int?> = createField(DSL.name("adjusted_score"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>scores.tee_time</code>.
     */
    val TEE_TIME: TableField<ScoresRecord, String?> = createField(DSL.name("tee_time"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>scores.handicap</code>.
     */
    val HANDICAP: TableField<ScoresRecord, Float?> = createField(DSL.name("handicap"), SQLDataType.REAL, this, "")

    /**
     * The column <code>scores.course_seq</code>.
     */
    val COURSE_SEQ: TableField<ScoresRecord, Int?> = createField(DSL.name("course_seq"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>scores.course_tees</code>.
     */
    val COURSE_TEES: TableField<ScoresRecord, Int?> = createField(DSL.name("course_tees"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>scores.used</code>.
     */
    val USED: TableField<ScoresRecord, String?> = createField(DSL.name("used"), SQLDataType.CHAR(1), this, "")

    private constructor(alias: Name, aliased: Table<ScoresRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<ScoresRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>scores</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>scores</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>scores</code> table reference
     */
    constructor(): this(DSL.name("scores"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, ScoresRecord>): this(Internal.createPathAlias(child, key), child, key, SCORES, null)
    override fun getSchema(): Schema? = if (aliased()) null else DefaultSchema.DEFAULT_SCHEMA
    override fun getReferences(): List<ForeignKey<ScoresRecord, *>> = listOf(SCORES__FK_GOLFER_SCORES, SCORES__FK_COURSE_SCORES)

    private lateinit var _golfer: Golfer
    private lateinit var _course: Course

    /**
     * Get the implicit join path to the <code>public.golfer</code> table.
     */
    fun golfer(): Golfer {
        if (!this::_golfer.isInitialized)
            _golfer = Golfer(this, SCORES__FK_GOLFER_SCORES)

        return _golfer;
    }

    val golfer: Golfer
        get(): Golfer = golfer()

    /**
     * Get the implicit join path to the <code>public.course</code> table.
     */
    fun course(): Course {
        if (!this::_course.isInitialized)
            _course = Course(this, SCORES__FK_COURSE_SCORES)

        return _course;
    }

    val course: Course
        get(): Course = course()
    override fun `as`(alias: String): Scores = Scores(DSL.name(alias), this)
    override fun `as`(alias: Name): Scores = Scores(alias, this)
    override fun `as`(alias: Table<*>): Scores = Scores(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Scores = Scores(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Scores = Scores(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Scores = Scores(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row9<String?, Int?, Float?, Int?, String?, Float?, Int?, Int?, String?> = super.fieldsRow() as Row9<String?, Int?, Float?, Int?, String?, Float?, Int?, Int?, String?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (String?, Int?, Float?, Int?, String?, Float?, Int?, Int?, String?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (String?, Int?, Float?, Int?, String?, Float?, Int?, Int?, String?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
