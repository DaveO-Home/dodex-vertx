/*
 * This file is generated by jOOQ.
 */
package golf.handicap.generated.tables.records


import golf.handicap.generated.tables.Course

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record4
import org.jooq.Row4
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class CourseRecord() : UpdatableRecordImpl<CourseRecord>(Course.COURSE), Record4<Int?, String?, String?, String?> {

    open var courseSeq: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var courseName: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var courseCountry: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var courseState: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row4<Int?, String?, String?, String?> = super.fieldsRow() as Row4<Int?, String?, String?, String?>
    override fun valuesRow(): Row4<Int?, String?, String?, String?> = super.valuesRow() as Row4<Int?, String?, String?, String?>
    override fun field1(): Field<Int?> = Course.COURSE.COURSE_SEQ
    override fun field2(): Field<String?> = Course.COURSE.COURSE_NAME
    override fun field3(): Field<String?> = Course.COURSE.COURSE_COUNTRY
    override fun field4(): Field<String?> = Course.COURSE.COURSE_STATE
    override fun component1(): Int? = courseSeq
    override fun component2(): String? = courseName
    override fun component3(): String? = courseCountry
    override fun component4(): String? = courseState
    override fun value1(): Int? = courseSeq
    override fun value2(): String? = courseName
    override fun value3(): String? = courseCountry
    override fun value4(): String? = courseState

    override fun value1(value: Int?): CourseRecord {
        this.courseSeq = value
        return this
    }

    override fun value2(value: String?): CourseRecord {
        this.courseName = value
        return this
    }

    override fun value3(value: String?): CourseRecord {
        this.courseCountry = value
        return this
    }

    override fun value4(value: String?): CourseRecord {
        this.courseState = value
        return this
    }

    override fun values(value1: Int?, value2: String?, value3: String?, value4: String?): CourseRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        return this
    }

    /**
     * Create a detached, initialised CourseRecord
     */
    constructor(courseSeq: Int? = null, courseName: String? = null, courseCountry: String? = null, courseState: String? = null): this() {
        this.courseSeq = courseSeq
        this.courseName = courseName
        this.courseCountry = courseCountry
        this.courseState = courseState
    }
}
