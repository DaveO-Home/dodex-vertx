/*
 * This file is generated by jOOQ.
 */
package golf.handicap.generated.tables.records


import golf.handicap.generated.tables.Groups

import java.time.OffsetDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record5
import org.jooq.Row5
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class GroupsRecord() : UpdatableRecordImpl<GroupsRecord>(Groups.GROUPS), Record5<Int?, String?, Int?, OffsetDateTime?, OffsetDateTime?> {

    open var id: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var name: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var owner: Int?
        set(value): Unit = set(2, value)
        get(): Int? = get(2) as Int?

    open var created: OffsetDateTime?
        set(value): Unit = set(3, value)
        get(): OffsetDateTime? = get(3) as OffsetDateTime?

    open var updated: OffsetDateTime?
        set(value): Unit = set(4, value)
        get(): OffsetDateTime? = get(4) as OffsetDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row5<Int?, String?, Int?, OffsetDateTime?, OffsetDateTime?> = super.fieldsRow() as Row5<Int?, String?, Int?, OffsetDateTime?, OffsetDateTime?>
    override fun valuesRow(): Row5<Int?, String?, Int?, OffsetDateTime?, OffsetDateTime?> = super.valuesRow() as Row5<Int?, String?, Int?, OffsetDateTime?, OffsetDateTime?>
    override fun field1(): Field<Int?> = Groups.GROUPS.ID
    override fun field2(): Field<String?> = Groups.GROUPS.NAME
    override fun field3(): Field<Int?> = Groups.GROUPS.OWNER
    override fun field4(): Field<OffsetDateTime?> = Groups.GROUPS.CREATED
    override fun field5(): Field<OffsetDateTime?> = Groups.GROUPS.UPDATED
    override fun component1(): Int? = id
    override fun component2(): String? = name
    override fun component3(): Int? = owner
    override fun component4(): OffsetDateTime? = created
    override fun component5(): OffsetDateTime? = updated
    override fun value1(): Int? = id
    override fun value2(): String? = name
    override fun value3(): Int? = owner
    override fun value4(): OffsetDateTime? = created
    override fun value5(): OffsetDateTime? = updated

    override fun value1(value: Int?): GroupsRecord {
        this.id = value
        return this
    }

    override fun value2(value: String?): GroupsRecord {
        this.name = value
        return this
    }

    override fun value3(value: Int?): GroupsRecord {
        this.owner = value
        return this
    }

    override fun value4(value: OffsetDateTime?): GroupsRecord {
        this.created = value
        return this
    }

    override fun value5(value: OffsetDateTime?): GroupsRecord {
        this.updated = value
        return this
    }

    override fun values(value1: Int?, value2: String?, value3: Int?, value4: OffsetDateTime?, value5: OffsetDateTime?): GroupsRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        return this
    }

    /**
     * Create a detached, initialised GroupsRecord
     */
    constructor(id: Int? = null, name: String? = null, owner: Int? = null, created: OffsetDateTime? = null, updated: OffsetDateTime? = null): this() {
        this.id = id
        this.name = name
        this.owner = owner
        this.created = created
        this.updated = updated
    }
}
