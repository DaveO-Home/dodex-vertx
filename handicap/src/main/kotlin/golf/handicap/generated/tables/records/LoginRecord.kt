/*
 * This file is generated by jOOQ.
 */
package golf.handicap.generated.tables.records


import golf.handicap.generated.tables.Login

import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record2
import org.jooq.Record4
import org.jooq.Row4
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class LoginRecord() : UpdatableRecordImpl<LoginRecord>(Login.LOGIN), Record4<Int?, String?, String?, LocalDateTime?> {

    var id: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    var name: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    var password: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    var lastLogin: LocalDateTime?
        set(value): Unit = set(3, value)
        get(): LocalDateTime? = get(3) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record2<Int?, String?> = super.key() as Record2<Int?, String?>

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row4<Int?, String?, String?, LocalDateTime?> = super.fieldsRow() as Row4<Int?, String?, String?, LocalDateTime?>
    override fun valuesRow(): Row4<Int?, String?, String?, LocalDateTime?> = super.valuesRow() as Row4<Int?, String?, String?, LocalDateTime?>
    override fun field1(): Field<Int?> = Login.LOGIN.ID
    override fun field2(): Field<String?> = Login.LOGIN.NAME
    override fun field3(): Field<String?> = Login.LOGIN.PASSWORD
    override fun field4(): Field<LocalDateTime?> = Login.LOGIN.LAST_LOGIN
    override fun component1(): Int? = id
    override fun component2(): String? = name
    override fun component3(): String? = password
    override fun component4(): LocalDateTime? = lastLogin
    override fun value1(): Int? = id
    override fun value2(): String? = name
    override fun value3(): String? = password
    override fun value4(): LocalDateTime? = lastLogin

    override fun value1(value: Int?): LoginRecord {
        this.id = value
        return this
    }

    override fun value2(value: String?): LoginRecord {
        this.name = value
        return this
    }

    override fun value3(value: String?): LoginRecord {
        this.password = value
        return this
    }

    override fun value4(value: LocalDateTime?): LoginRecord {
        this.lastLogin = value
        return this
    }

    override fun values(value1: Int?, value2: String?, value3: String?, value4: LocalDateTime?): LoginRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        return this
    }

    /**
     * Create a detached, initialised LoginRecord
     */
    constructor(id: Int? = null, name: String? = null, password: String? = null, lastLogin: LocalDateTime? = null): this() {
        this.id = id
        this.name = name
        this.password = password
        this.lastLogin = lastLogin
    }
}
