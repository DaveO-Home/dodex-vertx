/*
 * This file is generated by jOOQ.
 */
package golf.handicap.generated.tables.records


import golf.handicap.generated.tables.Member

import org.jooq.Field
import org.jooq.Record2
import org.jooq.Row2
import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class MemberRecord() : TableRecordImpl<MemberRecord>(Member.MEMBER), Record2<Int?, Int?> {

    var groupId: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    var userId: Int?
        set(value): Unit = set(1, value)
        get(): Int? = get(1) as Int?

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row2<Int?, Int?> = super.fieldsRow() as Row2<Int?, Int?>
    override fun valuesRow(): Row2<Int?, Int?> = super.valuesRow() as Row2<Int?, Int?>
    override fun field1(): Field<Int?> = Member.MEMBER.GROUP_ID
    override fun field2(): Field<Int?> = Member.MEMBER.USER_ID
    override fun component1(): Int? = groupId
    override fun component2(): Int? = userId
    override fun value1(): Int? = groupId
    override fun value2(): Int? = userId

    override fun value1(value: Int?): MemberRecord {
        this.groupId = value
        return this
    }

    override fun value2(value: Int?): MemberRecord {
        this.userId = value
        return this
    }

    override fun values(value1: Int?, value2: Int?): MemberRecord {
        this.value1(value1)
        this.value2(value2)
        return this
    }

    /**
     * Create a detached, initialised MemberRecord
     */
    constructor(groupId: Int? = null, userId: Int? = null): this() {
        this.groupId = groupId
        this.userId = userId
    }
}
