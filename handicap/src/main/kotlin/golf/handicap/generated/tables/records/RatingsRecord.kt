/*
 * This file is generated by jOOQ.
 */
package golf.handicap.generated.tables.records


import golf.handicap.generated.tables.Ratings

import org.jooq.Field
import org.jooq.Record2
import org.jooq.Record6
import org.jooq.Row6
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class RatingsRecord() : UpdatableRecordImpl<RatingsRecord>(Ratings.RATINGS), Record6<Int?, Int?, String?, Float?, Int?, Int?> {

    open var courseSeq: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var tee: Int?
        set(value): Unit = set(1, value)
        get(): Int? = get(1) as Int?

    open var teeColor: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var teeRating: Float?
        set(value): Unit = set(3, value)
        get(): Float? = get(3) as Float?

    open var teeSlope: Int?
        set(value): Unit = set(4, value)
        get(): Int? = get(4) as Int?

    open var teePar: Int?
        set(value): Unit = set(5, value)
        get(): Int? = get(5) as Int?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record2<Int?, Int?> = super.key() as Record2<Int?, Int?>

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row6<Int?, Int?, String?, Float?, Int?, Int?> = super.fieldsRow() as Row6<Int?, Int?, String?, Float?, Int?, Int?>
    override fun valuesRow(): Row6<Int?, Int?, String?, Float?, Int?, Int?> = super.valuesRow() as Row6<Int?, Int?, String?, Float?, Int?, Int?>
    override fun field1(): Field<Int?> = Ratings.RATINGS.COURSE_SEQ
    override fun field2(): Field<Int?> = Ratings.RATINGS.TEE
    override fun field3(): Field<String?> = Ratings.RATINGS.TEE_COLOR
    override fun field4(): Field<Float?> = Ratings.RATINGS.TEE_RATING
    override fun field5(): Field<Int?> = Ratings.RATINGS.TEE_SLOPE
    override fun field6(): Field<Int?> = Ratings.RATINGS.TEE_PAR
    override fun component1(): Int? = courseSeq
    override fun component2(): Int? = tee
    override fun component3(): String? = teeColor
    override fun component4(): Float? = teeRating
    override fun component5(): Int? = teeSlope
    override fun component6(): Int? = teePar
    override fun value1(): Int? = courseSeq
    override fun value2(): Int? = tee
    override fun value3(): String? = teeColor
    override fun value4(): Float? = teeRating
    override fun value5(): Int? = teeSlope
    override fun value6(): Int? = teePar

    override fun value1(value: Int?): RatingsRecord {
        this.courseSeq = value
        return this
    }

    override fun value2(value: Int?): RatingsRecord {
        this.tee = value
        return this
    }

    override fun value3(value: String?): RatingsRecord {
        this.teeColor = value
        return this
    }

    override fun value4(value: Float?): RatingsRecord {
        this.teeRating = value
        return this
    }

    override fun value5(value: Int?): RatingsRecord {
        this.teeSlope = value
        return this
    }

    override fun value6(value: Int?): RatingsRecord {
        this.teePar = value
        return this
    }

    override fun values(value1: Int?, value2: Int?, value3: String?, value4: Float?, value5: Int?, value6: Int?): RatingsRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        return this
    }

    /**
     * Create a detached, initialised RatingsRecord
     */
    constructor(courseSeq: Int? = null, tee: Int? = null, teeColor: String? = null, teeRating: Float? = null, teeSlope: Int? = null, teePar: Int? = null): this() {
        this.courseSeq = courseSeq
        this.tee = tee
        this.teeColor = teeColor
        this.teeRating = teeRating
        this.teeSlope = teeSlope
        this.teePar = teePar
    }
}
