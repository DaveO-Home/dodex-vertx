/*
 * This file is generated by jOOQ.
 */
package golf.handicap.generated.tables.records


import golf.handicap.generated.tables.Scores

import org.jooq.Field
import org.jooq.Record9
import org.jooq.Row9
import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ScoresRecord() : TableRecordImpl<ScoresRecord>(Scores.SCORES), Record9<String?, Int?, Float?, Int?, String?, Float?, Int?, Int?, String?> {

    open var pin: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    open var grossScore: Int?
        set(value): Unit = set(1, value)
        get(): Int? = get(1) as Int?

    open var netScore: Float?
        set(value): Unit = set(2, value)
        get(): Float? = get(2) as Float?

    open var adjustedScore: Int?
        set(value): Unit = set(3, value)
        get(): Int? = get(3) as Int?

    open var teeTime: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    open var handicap: Float?
        set(value): Unit = set(5, value)
        get(): Float? = get(5) as Float?

    open var courseSeq: Int?
        set(value): Unit = set(6, value)
        get(): Int? = get(6) as Int?

    open var courseTees: Int?
        set(value): Unit = set(7, value)
        get(): Int? = get(7) as Int?

    open var used: String?
        set(value): Unit = set(8, value)
        get(): String? = get(8) as String?

    // -------------------------------------------------------------------------
    // Record9 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row9<String?, Int?, Float?, Int?, String?, Float?, Int?, Int?, String?> = super.fieldsRow() as Row9<String?, Int?, Float?, Int?, String?, Float?, Int?, Int?, String?>
    override fun valuesRow(): Row9<String?, Int?, Float?, Int?, String?, Float?, Int?, Int?, String?> = super.valuesRow() as Row9<String?, Int?, Float?, Int?, String?, Float?, Int?, Int?, String?>
    override fun field1(): Field<String?> = Scores.SCORES.PIN
    override fun field2(): Field<Int?> = Scores.SCORES.GROSS_SCORE
    override fun field3(): Field<Float?> = Scores.SCORES.NET_SCORE
    override fun field4(): Field<Int?> = Scores.SCORES.ADJUSTED_SCORE
    override fun field5(): Field<String?> = Scores.SCORES.TEE_TIME
    override fun field6(): Field<Float?> = Scores.SCORES.HANDICAP
    override fun field7(): Field<Int?> = Scores.SCORES.COURSE_SEQ
    override fun field8(): Field<Int?> = Scores.SCORES.COURSE_TEES
    override fun field9(): Field<String?> = Scores.SCORES.USED
    override fun component1(): String? = pin
    override fun component2(): Int? = grossScore
    override fun component3(): Float? = netScore
    override fun component4(): Int? = adjustedScore
    override fun component5(): String? = teeTime
    override fun component6(): Float? = handicap
    override fun component7(): Int? = courseSeq
    override fun component8(): Int? = courseTees
    override fun component9(): String? = used
    override fun value1(): String? = pin
    override fun value2(): Int? = grossScore
    override fun value3(): Float? = netScore
    override fun value4(): Int? = adjustedScore
    override fun value5(): String? = teeTime
    override fun value6(): Float? = handicap
    override fun value7(): Int? = courseSeq
    override fun value8(): Int? = courseTees
    override fun value9(): String? = used

    override fun value1(value: String?): ScoresRecord {
        this.pin = value
        return this
    }

    override fun value2(value: Int?): ScoresRecord {
        this.grossScore = value
        return this
    }

    override fun value3(value: Float?): ScoresRecord {
        this.netScore = value
        return this
    }

    override fun value4(value: Int?): ScoresRecord {
        this.adjustedScore = value
        return this
    }

    override fun value5(value: String?): ScoresRecord {
        this.teeTime = value
        return this
    }

    override fun value6(value: Float?): ScoresRecord {
        this.handicap = value
        return this
    }

    override fun value7(value: Int?): ScoresRecord {
        this.courseSeq = value
        return this
    }

    override fun value8(value: Int?): ScoresRecord {
        this.courseTees = value
        return this
    }

    override fun value9(value: String?): ScoresRecord {
        this.used = value
        return this
    }

    override fun values(value1: String?, value2: Int?, value3: Float?, value4: Int?, value5: String?, value6: Float?, value7: Int?, value8: Int?, value9: String?): ScoresRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        this.value9(value9)
        return this
    }

    /**
     * Create a detached, initialised ScoresRecord
     */
    constructor(pin: String? = null, grossScore: Int? = null, netScore: Float? = null, adjustedScore: Int? = null, teeTime: String? = null, handicap: Float? = null, courseSeq: Int? = null, courseTees: Int? = null, used: String? = null): this() {
        this.pin = pin
        this.grossScore = grossScore
        this.netScore = netScore
        this.adjustedScore = adjustedScore
        this.teeTime = teeTime
        this.handicap = handicap
        this.courseSeq = courseSeq
        this.courseTees = courseTees
        this.used = used
    }
}
